services:
  postgres:
    image: postgres:16
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: fleetdb
      POSTGRES_USER: fms
      POSTGRES_PASSWORD: secret
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - fms-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@fms.dev
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8081:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - fms-network

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - fms-network

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "9000:9000"
    networks:
      - fms-network

  redis:
    image: redis:7
    container_name: redis
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fms-network

  redis-ui:
    image: ghcr.io/joeferner/redis-commander:latest
    container_name: redis-ui
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8088:8081"
    networks:
      - fms-network

  fleet-service:
    image: fleet-service:latest
    container_name: fleet-service
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/q/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - postgres
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/fleetdb
      QUARKUS_DATASOURCE_USERNAME: fms
      QUARKUS_DATASOURCE_PASSWORD: secret
    ports:
      - "8080:8080"
    networks:
      - fms-network

  car-simulator-service:
    image: car-simulator-service:latest
    container_name: car-simulator-service
    depends_on:
      fleet-service:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - DRIVER_SERVICE_URL=http://fleet-service:8080
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - fms-network

  penalty-service:
    image: penalty-service:latest
    container_name: penalty-service
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - QUARKUS_REDIS_HOSTS=redis://redis:6379
    ports:
      - "8083:8083"
    networks:
      - fms-network

volumes:
  postgres_data:
  pgadmin_data:
  kafka_data:
  redis_data:

networks:
  fms-network:
